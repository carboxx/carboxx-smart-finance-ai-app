import { db } from './database';
import { chatManager } from './chatManager';

// Simulated AI Financial Advisor with RAG capabilities
export class FinancialChatbot {
  constructor() {
    this.context = '';
    this.memory = new Map(); // Per-chat memory
    this.personalityTraits = {
      helpfulness: 0.9,
      expertise: 0.8,
      friendliness: 0.85,
      proactiveness: 0.7
    };
  }

  // RAG-like system: Retrieve relevant financial data
  retrieveRelevantData(query) {
    const queryLower = query.toLowerCase();
    const relevantData = {
      portfolio: null,
      transactions: [],
      investments: [],
      expenses: [],
      insights: []
    };

    // Get current portfolio summary
    relevantData.portfolio = db.getPortfolioSummary();
    
    // Keywords mapping to data retrieval
    const keywords = {
      'spese': () => relevantData.expenses = db.getExpenses().slice(0, 10),
      'entrate': () => relevantData.transactions = db.getTransactions({ type: 'income' }).slice(0, 10),
      'investimenti': () => relevantData.investments = db.getInvestments(),
      'portafoglio': () => {
        relevantData.investments = db.getInvestments();
        relevantData.portfolio = db.getPortfolioSummary();
      },
      'budget': () => {
        relevantData.expenses = db.getExpenses();
        relevantData.transactions = db.getTransactions({ type: 'income' });
      },
      'pac': () => relevantData.investments = db.getPACPlans(),
      'performance': () => relevantData.investments = db.getInvestments()
    };

    // Execute relevant data retrieval based on query
    Object.keys(keywords).forEach(keyword => {
      if (queryLower.includes(keyword)) {
        keywords[keyword]();
      }
    });

    return relevantData;
  }

  // Generate financial insights
  generateInsights(data) {
    const insights = [];
    
    if (data.portfolio) {
      const { totalIncome, totalExpenses, totalInvestments, netWorth, cashFlow } = data.portfolio;
      
      // Cash flow analysis
      if (cashFlow > 0) {
        insights.push(`üí∞ Il tuo cash flow mensile √® positivo di ‚Ç¨${cashFlow.toLocaleString('it-IT')}. Ottimo lavoro!`);
      } else {
        insights.push(`‚ö†Ô∏è Il tuo cash flow √® negativo di ‚Ç¨${Math.abs(cashFlow).toLocaleString('it-IT')}. Considera di ridurre le spese.`);
      }
      
      // Savings rate
      const savingsRate = totalIncome > 0 ? ((totalIncome - totalExpenses) / totalIncome * 100) : 0;
      if (savingsRate > 20) {
        insights.push(`üéØ Eccellente! Stai risparmiando il ${savingsRate.toFixed(1)}% delle tue entrate.`);
      } else if (savingsRate > 10) {
        insights.push(`üëç Stai risparmiando il ${savingsRate.toFixed(1)}% delle tue entrate. Potresti migliorare!`);
      } else {
        insights.push(`üìà Risparmio solo il ${savingsRate.toFixed(1)}%. Ti consiglio di aumentare il risparmio al 20%.`);
      }
      
      // Investment allocation
      const investmentRatio = totalIncome > 0 ? (totalInvestments / totalIncome * 100) : 0;
      if (investmentRatio < 10) {
        insights.push(`üìä I tuoi investimenti rappresentano solo il ${investmentRatio.toFixed(1)}% delle entrate. Considera di investire di pi√π per il futuro.`);
      }
    }

    if (data.expenses.length > 0) {
      // Expense analysis
      const categoryTotals = {};
      data.expenses.forEach(expense => {
        categoryTotals[expense.category] = (categoryTotals[expense.category] || 0) + expense.amount;
      });
      
      const topCategory = Object.entries(categoryTotals)
        .sort(([,a], [,b]) => b - a)[0];
      
      if (topCategory) {
        insights.push(`üèÜ La tua categoria di spesa principale √® "${topCategory[0]}" con ‚Ç¨${topCategory[1].toLocaleString('it-IT')}.`);
      }
    }

    return insights;
  }

  // Simulated LLM response generation
  async generateResponse(query, relevantData, insights) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const queryLower = query.toLowerCase();
    
    // Template-based responses for different types of queries
    if (queryLower.includes('ciao') || queryLower.includes('hello')) {
      return `üëã Ciao! Sono il tuo assistente finanziario AI. Ho analizzato i tuoi dati e posso aiutarti con:

‚Ä¢ üìä Analisi del portafoglio
‚Ä¢ üí∞ Consigli di investimento  
‚Ä¢ üìà Pianificazione budget
‚Ä¢ üéØ Strategie di risparmio

Cosa vorresti sapere delle tue finanze?`;
    }
    
    if (queryLower.includes('portafoglio') || queryLower.includes('situazione')) {
      const portfolio = relevantData.portfolio;
      return `üìà **Analisi del tuo portafoglio:**

üí∞ **Patrimonio netto**: ‚Ç¨${portfolio.netWorth?.toLocaleString('it-IT') || 0}
üìä **Cash flow**: ‚Ç¨${portfolio.cashFlow?.toLocaleString('it-IT') || 0}
üíº **Investimenti**: ‚Ç¨${portfolio.totalInvestments?.toLocaleString('it-IT') || 0}

**Insights chiave:**
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

Vuoi approfondire qualche aspetto specifico?`;
    }
    
    if (queryLower.includes('investiment') || queryLower.includes('azioni')) {
      return `üöÄ **Analisi Investimenti:**

${relevantData.investments.length > 0 ? `
Hai ${relevantData.investments.length} investimenti attivi.

**Consigli strategici:**
‚Ä¢ üåç Diversifica geograficamente (USA, Europa, Mercati Emergenti)
‚Ä¢ üìä Mantieni un mix 70% azionario, 30% obbligazionario
‚Ä¢ üîÑ Considera ETF a basso costo per diversificazione
‚Ä¢ ‚è∞ Investi regolarmente con i PAC per mediare i prezzi

**Prossimi passi:** Ti suggerisco di aggiungere un ETF World per diversificare ulteriormente.
` : `
Non hai ancora investimenti registrati. 

**Consigli per iniziare:**
‚Ä¢ üéØ Inizia con un ETF World diversificato
‚Ä¢ üí° Considera un PAC mensile di ‚Ç¨200-500
‚Ä¢ üìö Studia i mercati prima di investire
‚Ä¢ ‚ö° Mantieni sempre un fondo di emergenza

Vuoi che ti aiuti a pianificare il tuo primo investimento?`}`;
    }
    
    if (queryLower.includes('spese') || queryLower.includes('budget')) {
      const totalExpenses = relevantData.expenses.reduce((sum, e) => sum + e.amount, 0);
      return `üí≥ **Analisi delle Spese:**

üìä **Spese totali**: ‚Ç¨${totalExpenses.toLocaleString('it-IT')}

**Consigli di ottimizzazione:**
‚Ä¢ üè† Casa: Max 30% del reddito
‚Ä¢ üöó Trasporti: Max 15% del reddito  
‚Ä¢ üçï Cibo: Max 10% del reddito
‚Ä¢ üé¨ Intrattenimento: Max 5% del reddito

**Strategia 50/30/20:**
‚Ä¢ 50% Necessit√† (casa, cibo, utenze)
‚Ä¢ 30% Desideri (intrattenimento, shopping)
‚Ä¢ 20% Risparmio e investimenti

${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}`;
    }
    
    if (queryLower.includes('pac') || queryLower.includes('piano accumulo')) {
      return `üîÑ **Piano di Accumulo Capitale (PAC):**

**Vantaggi del PAC:**
‚Ä¢ üìà Dollar Cost Averaging: Mediazione dei prezzi nel tempo
‚Ä¢ üéØ Disciplina negli investimenti
‚Ä¢ üìä Riduzione del rischio timing
‚Ä¢ üí∞ Investimenti automatici

**Strategia consigliata:**
‚Ä¢ üåç ETF MSCI World (60% del PAC)
‚Ä¢ üá™üá∫ ETF Europa (20% del PAC)  
‚Ä¢ üöÄ ETF Mercati Emergenti (20% del PAC)

**Frequenza ottimale:** Mensile per ridurre commissioni e volatilit√†.

Vuoi che ti aiuti a impostare un PAC personalizzato?`;
    }

    // Default response with general advice
    return `ü§ñ **Assistente Finanziario AI**

Ho analizzato la tua domanda "${query}" e i tuoi dati finanziari.

**Insights personalizzati:**
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

**Raccomandazioni generali:**
‚Ä¢ üìä Rivedi il portafoglio ogni 3 mesi
‚Ä¢ üí∞ Mantieni 3-6 mesi di spese come fondo emergenza
‚Ä¢ üìà Investi a lungo termine (10+ anni)
‚Ä¢ üéì Continua a formarti sui mercati finanziari

Posso aiutarti con domande specifiche su investimenti, budget, spese o pianificazione finanziaria. Cosa ti interessa di pi√π?`;
  }

  // Get chat memory context
  getChatMemory(chatId) {
    const chat = chatManager.getActiveChat();
    if (!chat) return '';
    
    // Build context from recent messages
    const recentMessages = chat.messages.slice(-10); // Last 10 messages
    let context = `Chat Topic: ${chat.topic}\nRecent conversation:\n`;
    
    recentMessages.forEach(msg => {
      const role = msg.type === 'user' ? 'User' : 'Assistant';
      context += `${role}: ${msg.content.substring(0, 200)}...\n`;
    });
    
    return context;
  }

  // Main chat function with memory
  async chat(userMessage, chatId = null) {
    try {
      const activeChat = chatManager.getActiveChat();
      const currentChatId = chatId || activeChat?.id;
      
      // 1. Get chat memory context
      const memoryContext = this.getChatMemory(currentChatId);
      
      // 2. Retrieve relevant data (RAG)
      const relevantData = this.retrieveRelevantData(userMessage);
      
      // 3. Generate insights
      const insights = this.generateInsights(relevantData);
      
      // 4. Generate AI response with memory context
      const response = await this.generateResponse(userMessage, relevantData, insights, memoryContext);
      
      // 5. Add messages to chat manager
      chatManager.addMessage({
        type: 'user',
        content: userMessage
      }, currentChatId);
      
      chatManager.addMessage({
        type: 'assistant',
        content: response,
        insights,
        relevantData: Object.keys(relevantData).filter(key => 
          Array.isArray(relevantData[key]) ? relevantData[key].length > 0 : relevantData[key]
        )
      }, currentChatId);
      
      return {
        response,
        insights,
        relevantDataUsed: Object.keys(relevantData).filter(key => 
          Array.isArray(relevantData[key]) ? relevantData[key].length > 0 : relevantData[key]
        )
      };
      
    } catch (error) {
      console.error('Chatbot error:', error);
      return {
        response: "‚ùå Scusa, ho avuto un problema nell'elaborare la tua richiesta. Riprova tra poco!",
        insights: [],
        relevantDataUsed: []
      };
    }
  }

  // Enhanced response generation with memory
  async generateResponse(query, relevantData, insights, memoryContext = '') {
    // Simulate API call delay for realism
    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));
    
    const queryLower = query.toLowerCase();
    
    // Check if this is a follow-up question based on memory
    const isFollowUp = this.detectFollowUp(query, memoryContext);
    
    // Template-based responses with memory awareness
    if (queryLower.includes('ciao') || queryLower.includes('hello')) {
      return `üëã Ciao! Sono il tuo assistente finanziario AI con memoria persistente.

üß† **Funzionalit√† avanzate:**
‚Ä¢ üìä Analisi in tempo reale dei tuoi dati
‚Ä¢ ü§ñ Sistema RAG per recupero informazioni intelligente
‚Ä¢ üíæ Memoria conversazionale che ricorda tutto
‚Ä¢ üîç Insights personalizzati e proattivi
‚Ä¢ üìà Monitoraggio continuo del portafoglio

Posso rispondere a domande complesse e ricordare le nostre conversazioni precedenti. Cosa vuoi sapere delle tue finanze?`;
    }
    
    if (isFollowUp && memoryContext) {
      const followUpResponse = this.generateFollowUpResponse(query, memoryContext, relevantData, insights);
      if (followUpResponse) return followUpResponse;
    }
    
    // Continue with existing response logic...
    if (queryLower.includes('portafoglio') || queryLower.includes('situazione')) {
      const portfolio = relevantData.portfolio;
      return `üìà **Analisi dettagliata del portafoglio:**

üí∞ **Patrimonio netto**: ‚Ç¨${portfolio.netWorth?.toLocaleString('it-IT') || 0}
üìä **Cash flow**: ‚Ç¨${portfolio.cashFlow?.toLocaleString('it-IT') || 0}
üíº **Investimenti**: ‚Ç¨${portfolio.totalInvestments?.toLocaleString('it-IT') || 0}

üß† **Analisi AI con memoria:**
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

${memoryContext ? 'üîÑ **Contesto conversazione:** Sto tenendo conto delle nostre discussioni precedenti per fornirti consigli pi√π mirati.' : ''}

**Raccomandazioni personalizzate basate sui tuoi pattern:**
‚Ä¢ üìä La tua situazione √® migliorata del +12% rispetto alle ultime analisi
‚Ä¢ üéØ Continua con la strategia di diversificazione attuale
‚Ä¢ ‚ö° Considera di aumentare il PAC del 10% se il cash flow lo permette

Vuoi approfondire qualche aspetto specifico?`;
    }
    
    // Enhanced investment advice
    if (queryLower.includes('investiment') || queryLower.includes('azioni')) {
      return `üöÄ **Analisi Investimenti Avanzata:**

${relevantData.investments.length > 0 ? `
üìä **Portfolio Analysis:**
‚Ä¢ Hai ${relevantData.investments.length} posizioni attive
‚Ä¢ Performance media: +8.5% YTD
‚Ä¢ Volatilit√† controllata: 15.2%

ü§ñ **AI Recommendations (basate su ML):**
‚Ä¢ üåç Diversificazione geografica: BUONA (70% US, 20% EU, 10% EM)
‚Ä¢ üè≠ Settoriale: Da migliorare (overweight Tech)
‚Ä¢ ‚è∞ Timing: Ottimo momento per aumentare esposizione Value
‚Ä¢ üîÑ Rebalancing suggerito: Trimestrale

**Strategia AI-driven:**
‚Ä¢ üìà Modello predittivo indica trend positivo per prossimi 6 mesi
‚Ä¢ üéØ Target allocation: 60% Equity, 25% Bonds, 15% Alternatives
‚Ä¢ üí° Smart beta: Considera ETF momentum per Q1 2024
` : `
üéØ **Setup Portafoglio Ottimale (AI-powered):**
‚Ä¢ üèÜ Core: 40% MSCI World ETF (IE00B4L5Y983)
‚Ä¢ üá∫üá∏ Satellite: 20% S&P 500 (SPY)
‚Ä¢ üá™üá∫ Europe: 15% STOXX 600 ETF
‚Ä¢ üåè Emerging: 10% MSCI EM ETF
‚Ä¢ üèõÔ∏è Bonds: 15% Aggregate Bond ETF

**PAC Intelligente:**
‚Ä¢ üí∞ ‚Ç¨300/mese automatico
‚Ä¢ ü§ñ Dynamic allocation based on market conditions
‚Ä¢ üìä Volatility targeting per ridurre drawdown
`}

${memoryContext ? '\nüß† **Memoria conversazionale:** Ricordo che hai mostrato interesse per PAC e strategie conservative. Questi consigli sono calibrati sui tuoi precedenti input.' : ''}`;
    }
    
    // Default enhanced response
    return this.generateDefaultResponse(query, insights, memoryContext, relevantData);
  }

  // Generate follow-up response based on memory
  generateFollowUpResponse(query, memoryContext, relevantData, insights) {
    const queryLower = query.toLowerCase();
    
    if (queryLower.includes('come dicevi') || queryLower.includes('come hai detto')) {
      return `üß† **Ricollegandomi alla nostra conversazione:**

Basandomi sulla nostra cronologia, stavo analizzando:
${insights.slice(0, 2).map(insight => `‚Ä¢ ${insight}`).join('\n')}

**Approfondimento richiesto:**
Vedo che vuoi maggiori dettagli. Basandomi sui tuoi dati attuali e le nostre discussioni precedenti, ecco l'analisi completa...

${this.generateDetailedAnalysis(relevantData)}`;
    }
    
    if (queryLower.includes('e poi') || queryLower.includes('continua')) {
      return `üìà **Proseguendo il discorso:**

Dalla nostra conversazione emerge un pattern chiaro nei tuoi obiettivi finanziari. Ecco i prossimi passi strategici:

${this.generateNextSteps(relevantData, memoryContext)}`;
    }
    
    return null;
  }

  // Generate detailed analysis
  generateDetailedAnalysis(relevantData) {
    return `üîç **Analisi Approfondita:**

üìä **Metriche Avanzate:**
‚Ä¢ Sharpe Ratio portafoglio: 1.45 (Ottimo)
‚Ä¢ Maximum Drawdown: -8.2% (Controllato)
‚Ä¢ Beta vs mercato: 0.85 (Difensivo)

üí° **Insights Predittivi:**
‚Ä¢ Probabilit√† outperformance prossimi 12M: 75%
‚Ä¢ Risk-adjusted return atteso: +11.2%
‚Ä¢ Scenario analysis: 90% prob. positive returns`;
  }

  // Generate next steps
  generateNextSteps(relevantData, context) {
    return `üéØ **Prossimi Passi Strategici:**

1. **Immediate (0-30 giorni):**
   ‚Ä¢ Rivedi allocation bond (sottopeso del 5%)
   ‚Ä¢ Considera hedge inflation con TIPS
   
2. **Medium term (1-6 mesi):**
   ‚Ä¢ Incrementa PAC a ‚Ç¨400/mese
   ‚Ä¢ Diversifica in small-cap value
   
3. **Long term (6+ mesi):**
   ‚Ä¢ Valuta real estate allocation (5-10%)
   ‚Ä¢ Pianifica tax-loss harvesting`;
  }

  // Detect if this is a follow-up question
  detectFollowUp(query, memoryContext) {
    const followUpIndicators = [
      'come dicevi', 'come hai detto', 'e poi', 'continua', 'inoltre',
      'approfondisci', 'spiegami meglio', 'cosa intendi', 'per esempio'
    ];
    
    return followUpIndicators.some(indicator => 
      query.toLowerCase().includes(indicator)
    ) && memoryContext.length > 0;
  }

  // Enhanced default response
  generateDefaultResponse(query, insights, memoryContext, relevantData) {
    return `ü§ñ **Assistente Finanziario AI Avanzato**

Ho analizzato la tua domanda "${query}" utilizzando:
‚Ä¢ üîç **RAG System**: Dati finanziari in tempo reale
‚Ä¢ üß† **Memory**: Contesto delle conversazioni precedenti  
‚Ä¢ üìä **ML Models**: Pattern recognition sui tuoi comportamenti

**Insights personalizzati:**
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

**Raccomandazioni AI-driven:**
‚Ä¢ üìä Continua il monitoraggio trimestrale
‚Ä¢ üí∞ Ottimizza tax efficiency del portafoglio
‚Ä¢ üéØ Mantieni disciplina negli investimenti sistematici
‚Ä¢ üîÑ Review allocation ogni 6 mesi

${memoryContext ? 'üß† **Memoria attiva:** Sto costruendo un profilo sempre pi√π accurato delle tue preferenze per consigli sempre pi√π mirati.' : ''}

Vuoi che approfondisca qualche aspetto specifico? La mia memoria conserver√† tutto per le prossime conversazioni! üöÄ`;
  }

  // Get conversation statistics
  getConversationStats() {
    const allChats = chatManager.getAllChats();
    const totalMessages = allChats.reduce((sum, chat) => sum + chat.messages.length, 0);
    const totalChats = allChats.length;
    
    return {
      totalChats,
      totalMessages,
      averageMessagesPerChat: totalMessages / totalChats,
      oldestChat: allChats.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))[0],
      mostActiveChat: allChats.sort((a, b) => b.messages.length - a.messages.length)[0]
    };
  }
}

// Export singleton instance
export const financialChatbot = new FinancialChatbot();